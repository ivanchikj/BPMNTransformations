
Ho letto che è meglio avere tutti gli attributi private e usare dei metodi getters e setters.
	una volta che hai i metodi setters, li puoi anche usare all'interno del costruttore


ASKANA per quanto riguarda il report, invece di fare come facevo all'inizio,
	 	ovvero per ogni regola inserire dei momenti in cui a seconda di quello che succedeva scrivevo qualcosa nel report oppure no
	fare qualcosa così:
		provare ad applicare ogni regola, poi comparare il modello com'era prima della regola e com'era dopo usando il mio metodo per comparare i grafici. Se sono diversi allora scrivere nel report che sei riuscito ad applicarla, altrimenti no.


IDEA:
At this point I dont think it matters, but I could create a method
that automatically removes empty nodes from the nodes list that I usually have to dea with
https://stackoverflow.com/questions/20259742/why-am-i-getting-extra-text-nodes-as-child-nodes-of-root-node


TODO: in rule1 and rule2 methods isApplicable, the condition that all successors/predecessors have to be of the same type is useless. 

TODO: in rule1 and rule2, make it so that if a gat has 1 incoming and 1 outgoin, then it's boh a merge and a split. Explain in the thesis that this is illegal in BPMN but it should work regardless


NOTE:
	Ogni metodo XPATH diventa un metodo a parte.
	Il codice diventa più facile da leggere, e poi
	più verboso. E forse anche più facile da testare.

	Aggiungi qualche elemento di defensive programming. Ad esempio io in setsource posso anche avere come input lo string
	di un elemento invece che di un seqFlow, e ovviamente non funzionerebbe. Abbi quindi dei check.
	L'ideale, nel lungo periodo, sarebbe di avere classi diverse con metodi diversi e fare quindi un refactoring.


------------------------ Domande ------------------------

-

My current "solution" to the problem of recognizing the structures where the "third part" of rule 3 is applicable is:
	"Search for all the instances where an exclusive gateway is followed by a single parallel gateway.
	Then compare all of those isntances and find out wheter the parallel gateway is always the same for all those instances. If it is, then I can apply rule 3."

