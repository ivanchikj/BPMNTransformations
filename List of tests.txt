List of tests:




./TestGraphs/3.3.2 Exclusive_R1R2R4.bpmn YRNP (-1 -3*2)
./TestGraphs/ YRNP (-1 -r3*2) 
./TestGraphs/ NRNP (-1 -r3*2) 

====
./TestGraphs/ NRNP (-1)
./TestGraphs/ NRNP (-1)

        ./TestGraphs/Primaregoladuevolte.bpmn NRNP (-1 -3)
./TestGraphs/Primaregoladuevolte.bpmn YRNP (-1 -2)
        ./TestGraphs/Primaregoladuevolte.bpmn YRNP (-1 -3)
s
./TestGraphs/ NRNP (-1 -2)
./TestGraphs/ NRNP (-1 -2 -3 -4)
./TestGraphs/ YRYP (-1 -2 -3 -4)
./TestGraphs/ NRYP (-1 -2 -3 -4)
./TestGraphs/ YRNP (-1 -2 -3 -4)




============================================================


Vecchi test manuali:


//String input = "./TestGraphs/rule1parallel.bpmn.xml";
        //String input = "./TestGraphs/rule1recursive.bpmn.xml"
        //String input = "./TestGraphs/rule2exclusiveConditions.bpmn.xml";
        //String input = "./TestGraphs/Rule3a.bpmn.xml";
        //String input = "./TestGraphs/Rule3b.bpmn.xml";

        //String input = "./TestGraphs/Rule4b.bpmn.xml";
        //String input = "./TestGraphs/Rule4c.bpmn.xml";
        //String input = "./TestGraphs/TravelingTest.bpmn.xml";
        //input = "./TestGraphs/multiple/"; //Testing more than one file.

//	String original = "./TestGraphs/DifferenceDetectingTest/Original.bpmn.xml";
//	String different1 = "./TestGraphs/DifferenceDetectingTest/slightlyDifferent.bpmn.xml";
//	String different2 = "./TestGraphs/DifferenceDetectingTest/different.bpmn.xml";
//	String same = "./TestGraphs/DifferenceDetectingTest/same.bpmn.xml";
//	String identical = "./TestGraphs/DifferenceDetectingTest/originalVariant.bpmn.xml";
//
//	Model origina = new Model(original);
//	Model diff1 = new Model(different1);
//	Model diff2 = new Model(different2);
//	Model sameModel = new Model(same);
//	Model identicModel = new Model(identical);
//
//	TravelAgency ta1 = new TravelAgency(origina);
//	ta1.printNumberOfPaths();
//	TravelAgency ta2 = new TravelAgency(sameModel);
//	ta2.printNumberOfPaths();
//
//	ta1.printMandatoryDeepSuccessors();
//	ta2.printMandatoryDeepSuccessors();
//
//	System.out.println("SONO DIVERSI: " + Execution.modelsAreDifferent(origina, sameModel));
//	System.out.println("SONO DIVERSI: " + Execution.modelsAreDifferent(origina, origina));
//	System.out.println("SONO DIVERSI: " + Execution.modelsAreDifferent(origina, diff1));
//	System.out.println("SONO DIVERSI: " + Execution.modelsAreDifferent(origina, diff2));
//	System.out.println("SONO DIVERSI: " + Execution.modelsAreDifferent(origina, identicModel));


        String input = "./TestGraphs/ -r1*3-2-3";
        Execution execution = new Execution(input);


        //ExecutionTest execution = new ExecutionTest();
        //execution.Execute();



//	String m4a = "./TestGraphs/Rule4a.bpmn.xml";
//	Model test4a = new Model(m4a);
//	Model output = Rule4.a(test4a);


//	String m4b = "./TestGraphs/Rule4b.bpmn.xml";
//	Model test4b = new Model(m4b);
//	Model output = Rule4.b(test4b);


//	String m4c = "./TestGraphs/Rule4c.bpmn.xml";
//	Model test4c = new Model(m4c);
//	Model output = Rule4.c(test4c);
//

//	String m4aR = "./TestGraphs/Rule4aR.bpmn.xml";
//	Model test4aR = new Model(m4aR);
//	Model output = Reverse4.a(test4aR);

//	String m4bR = "./TestGraphs/Rule4bR.bpmn.xml";
//	Model test4bR = new Model(m4bR);
//	Model output = Reverse4.b(test4bR);

//	String m4cR = "./TestGraphs/Rule4cR.bpmn.xml";
//	Model test4cR = new Model(m4cR);
//	Model output = Reverse4.c(test4cR);

//	String m3c = "./TestGraphs/Rule3cOneInsideTheOther.bpmn.xml";
//	Model test3c = new Model(m3c);
//	Model output = Rule3.c(test3c);


//	String m1R = "./TestGraphs/rule1R.bpmn.xml";
//	Model test1R = new Model(m1R);
//	Model output = Reverse1.applyRule(test1R, 3); //NOTE that the int can be whatever positive number

//	String m2R = "./TestGraphs/Rule2R.bpmn.xml";
//	Model test2R = new Model(m2R);
//	Model output = Reverse2.applyRule(test2R, 2);

//	String patSplitTest = "./TestGraphs/pathTest.bpmn.xml";
//	Model testPath = new Model(patSplitTest);
//	TravelAgency tAgency = new TravelAgency(testPath);
//	tAgency.printPaths();
//	tAgency.printMandatoryDeepSuccessors();

//	String m3cR = "./TestGraphs/Rule3cR.bpmn.xml";
//	Model test3cR = new Model(m3cR);
//	Model output = Reverse3.c(test3cR, 2);
//

        //GETHPATH TEST:
//	String gPath = "./TestGraphs/GetPath.bpmn.xml";
//	Model testgPath = new Model(gPath);
//	TravelAgency tAgency = new TravelAgency(testgPath);
//	tAgency.printPaths();
//	tAgency.printMandatoryDeepSuccessors();

        //Execution.saveModelToFile(output, "TODO", "TODO", "TODO");


//	Model orgnl = new Model(original);
//	Model diff1 = new Model(different1);
//	Model diff2 = new Model(different2);
//	Model sameModel = new Model(same);
        //Model identicModel = new Model(identical);
        //Element startingPointElement = orgnl.findElemById("StartEvent_1");

        //TravelAgency travelAgency = new TravelAgency(orgnl);

        //travelAgency.getPaths();

        //Execution.modelsAreDifferent(orgnl, identicModel);
